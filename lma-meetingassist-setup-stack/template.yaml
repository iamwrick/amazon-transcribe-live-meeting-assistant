# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Amazon Transcribe Live Meeting Assist - Meeting Assist Setup

Parameters:

  # Required
  LMAStackName:
    Type: String
    Description: LMA Stack Name

  # Optional
  Domain:
    Type: String
    Default: ''
    AllowedValues:
      - ''
      - Healthcare
    Description: The domain of the application (optional)
    
  # Required
  AISTACK:
    Type: String
    Description: AISTACK Stack ARN

  QNABOTSTACK:
    Default: ''
    Type: String
    Description: QNABOT Stack ARN  

  MeetingAssistService:
    Default: 'NONE'
    Type: String
    AllowedValues:
      - 'NONE'
      - 'BEDROCK_KNOWLEDGE_BASE'
    Description: Choose which knowledge base / LLM service to use (Currently only BEDROCK_KNOWLEDGE_BASE is supported)

  BedrockKnowledgeBaseID:
    Type: String
    Default: ''
    AllowedPattern: '^(|NONE|[0-9a-zA-Z]{10})$'
    Description: >
      If MeetingAssistService is BEDROCK_KNOWLEDGE_BASE, provide the knowledge base *Id* (not name) of an existing Bedrock knowledge base to be used for Meeting Assist bot. Use 'NONE' if MeetingAssistService is not BEDROCK_KNOWLEDGE_BASE.

  BedrockKnowledgeBaseModelID:
    Type: String
    Default: ''
    AllowedValues:
      - ''
      - 'anthropic.claude-3-haiku-20240307-v1:0'
      - 'anthropic.claude-3-sonnet-20240229-v1:0'
    Description: >-
      If MeetingAssistService is BEDROCK_KNOWLEDGE_BASE, select a Bedrock LLM model from the list."

  AmazonQAppId:
    Type: String
    Default: ''
    Description: >
      If MeetingAssistService is BEDROCK_KNOWLEDGE_BASE, select a Bedrock LLM model from the list. Use 'NONE' if MeetingAssistService is not BEDROCK_KNOWLEDGE_BASE.

  AmazonQUserId:
    Type: String
    Default: ''
    Description: >-
      If ASSISTANT is Q_BUSINESS, provide an email address to use as the proxy user (e.g. jdoe@example.com)

  # Required
  LexMeetingAssistBotId:
    Type: String
    Description: >-
      Lex Bot Id used for Meeting Assist. 
    AllowedPattern: '^(|[0-9a-zA-Z]{10})$'

  # Required
  LexMeetingAssistAliasId:
    Type: String
    Description: >-
      Lex Bot Alias ID used for Meeting Assist.
    AllowedPattern: '^(|[0-9a-zA-Z]{10})$'

  # Required
  LexMeetingAssistLocaleId:
    Type: String
    Description: >-
      Lex Bot Locale ID used for Meeting Assist.
    AllowedValues:
        - ca_ES
        - de_AT
        - de_DE
        - en_AU
        - en_GB
        - en_IN
        - en_US
        - en_ZA
        - es_419
        - es_ES
        - es_US
        - fr_CA
        - fr_FR
        - it_IT
        - ja_JP
        - ko_KR
        - pt_BR
        - pt_PT
        - zh_CN

  # Required
  QnaMeetingAssistDemoJson:
    Type: String
    Description: >-
      Location of QnABot meeting assist sample/demo file (in JSON lines format) 

  QnaBotSettings:
    Type: String
    Description: JSON string specifying key/value pairs to configure new defaults for QnAbot Settings

  WebAppBucket:
    Type: String
    Description: The LMA Web App Bucket Name.

  CloudFrontDistributionId:
    Type: String
    Description: The LMA web app CloudFront distribution id

  LexMeetingAssistIdentityPoolId:
    Type: String
    Description: The LMA Meeting Assist Identity Pool ID

  CloudFrontDomainName:
    Type: String
    Description: The domain name of the LMA CloudFront distribution

  FetchTranscriptFunctionArn:
    Type: String
    Description: ARN of Fetch Transcript function

  TranscriptSummaryFunctionArn:
    Type: String
    Description: ARN of Transcript Summary function (if defined)

  # Changes to Params below force MeetingAssist Setup to update.
  TranscribeLanguageCode:
    Type: String
  TranscriptLambdaHookFunctionArn:
    Type: String
  TranscriptLambdaHookFunctionNonPartialOnly:
    Type: String
  DynamoDbExpirationInDays:
    Type: String
  EndOfCallTranscriptSummary:
    Type: String
  EndOfCallLambdaHookFunctionArn:
    Type: String
  Version:
    Type: String

Conditions:
  ShouldConfigureQnabot: !Not [!Equals [!Ref QNABOTSTACK, '']]
  HasSummaryLambdaFunction: !Not [!Equals [!Ref TranscriptSummaryFunctionArn, '']]
  #ShouldConfigureBedrockKB: !Equals [!Ref MeetingAssistService, 'BEDROCK_KNOWLEDGE_BASE']
  ShouldConfigureBedrockKB: !Not [ !Equals [ !Ref BedrockKnowledgeBaseID, 'NONE' ] ] # Updated condition to check if BedrockKnowledgeBaseID is provided
  ShouldConfigureQBusiness: !Equals [!Ref MeetingAssistService, 'Q_BUSINESS']
  IsHealthcareDomain: !Equals [ !Ref Domain, 'Healthcare' ]


Resources:

  # Custom resource to transform input to lowercase.                                             
  GetLowercaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.11
      Timeout: 30
      InlineCode: |
          import cfnresponse
          import time
          def handler(event, context):                                                    
              output = event['ResourceProperties'].get('InputString', '').lower()
              responseData = {'OutputString': output}                                            
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.

  LowercaseStackName:
    Type: Custom::GetLowercase
    Properties:
      ServiceToken: !GetAtt GetLowercaseFunction.Arn
      InputString: !Ref LMAStackName

  LambdaHookSummarizeCallRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns: 
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies: 
        - Fn::If:
          - HasSummaryLambdaFunction
          - PolicyName: InlinePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Action: lambda:InvokeFunction
                  Effect: Allow
                  Resource: !Ref TranscriptSummaryFunctionArn
          - Ref: AWS::NoValue

  QNASummarizeCallFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      # FunctionName must start with 'QNA-' to match QnABot fulfillment role permissions
      FunctionName: !Sub "QNA-SummarizeCall-${LMAStackName}"
      Role: !GetAtt LambdaHookSummarizeCallRole.Arn
      Handler: qna_summarize_call_function.handler
      Runtime: python3.11
      Timeout: 900
      Environment:
        Variables:
          TRANSCRIPT_SUMMARY_FUNCTION_ARN: !Ref TranscriptSummaryFunctionArn
      Code: ./src
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.
          - id: W58
            reason: Managed policy already provides access to CloudWatch logs.

  Boto3Layer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      Content: ./boto3_layer
      CompatibleRuntimes:
        - python3.11

  QNAQBusinessFunctionRole:
    Condition: ShouldConfigureQBusiness
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "qbusiness:ChatSync"
                Resource: !Sub "arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${AmazonQAppId}"
          PolicyName: QBusinessPolicy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: "arn:aws:s3:::*-importbucket-*/*"
          PolicyName: S3ImportBucketPolicy
        - PolicyName: InlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource: !Ref FetchTranscriptFunctionArn

  QNAQBusinessFunction:
    Condition: ShouldConfigureQBusiness
    Type: "AWS::Lambda::Function"
    Properties:
      # FunctionName must start with 'QNA-' to match QnABot fulfillment role permissions
      FunctionName: !Sub "QNA-${LMAStackName}-QBusiness-LambdaHook"
      Role: !GetAtt QNAQBusinessFunctionRole.Arn
      Handler: qna_qbusiness_lambdahook_function.handler
      Runtime: python3.11
      Layers: 
        - !Ref Boto3Layer
      Timeout: 900
      Environment:
        Variables:
          FETCH_TRANSCRIPT_FUNCTION_ARN: !Ref FetchTranscriptFunctionArn
          AMAZONQ_APP_ID: !Ref AmazonQAppId
          AMAZONQ_USER_ID: !Ref AmazonQUserId
      Code: ./src
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.

  QNABedrockKnowledgeBaseFunctionRole:
    Condition: ShouldConfigureBedrockKB
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "bedrock:Retrieve"
                  - "bedrock:RetrieveAndGenerate"
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${BedrockKnowledgeBaseID}"
              - Effect: Allow
                Action:
                  - "bedrock:InvokeModel"
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockKnowledgeBaseModelID}"
          PolicyName: BedrockPolicy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: "arn:aws:s3:::*-importbucket-*/*"
          PolicyName: S3ImportBucketPolicy
        - PolicyName: InlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource: !Ref FetchTranscriptFunctionArn

  QNABedrockKnowledgeBaseFunction:
    Condition: ShouldConfigureBedrockKB
    Type: "AWS::Lambda::Function"
    Properties:
      # FunctionName must start with 'QNA-' to match QnABot fulfillment role permissions
      FunctionName: !Sub "QNA-${LMAStackName}-BedrockKB-LambdaHook"
      Role: !GetAtt QNABedrockKnowledgeBaseFunctionRole.Arn
      Handler: qna_bedrockkb_lambdahook_function.handler
      Runtime: python3.11
      Layers: 
        - !Ref Boto3Layer
      Timeout: 900
      Environment:
        Variables:
          FETCH_TRANSCRIPT_FUNCTION_ARN: !Ref FetchTranscriptFunctionArn
          KB_ID: !Ref BedrockKnowledgeBaseID
          MODEL_ID: !Ref BedrockKnowledgeBaseModelID
      Code: ./src
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.

  SetupFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns: 
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: InlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackResource
                Effect: Allow
                Resource:
                  - !Ref AISTACK
              - Action:
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LMAStackName}*"
              - Action:
                  - iam:ListRolePolicies
                  - iam:PutRolePolicy
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${WebAppBucket}"
                  - !Sub "arn:${AWS::Partition}:s3:::${WebAppBucket}/*"
              # wtalukda-added
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:s3:::${QnaMeetingAssistDemoJson}"
              - Action:
                  - cloudfront:CreateInvalidation
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistributionId}"
              - !If
                - ShouldConfigureQnabot
                - Action:
                    - cloudformation:DescribeStacks
                    - cloudformation:DescribeStackResource
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${LMAStackName}-QNABOT*"
                - !Ref AWS::NoValue
              - !If
                - ShouldConfigureQnabot
                - Action:
                    - ssm:GetParameter
                    - ssm:PutParameter
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CFN-DefaultQnABotSettings*"
                - !Ref AWS::NoValue
              - !If 
                - ShouldConfigureQnabot
                - Action:
                    - s3:GetObject
                    - s3:PutObject
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:s3:::${LowercaseStackName.OutputString}*"
                    - !Sub "arn:aws:s3:::${QnaMeetingAssistDemoJson}"
                - !Ref AWS::NoValue
              - !If 
                - ShouldConfigureQnabot
                - Action:
                    - lambda:InvokeFunction
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LMAStackName}*"
                - !Ref AWS::NoValue

  SetupFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Role: !GetAtt SetupFunctionRole.Arn
      Handler: setup_function.handler
      Runtime: python3.11
      Timeout: 900
      Code: ./src
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92
            reason: Customer can choose reserved concurrency based on their requirement.
          - id: W58
            reason: Managed policy already provides access to CloudWatch logs.

  # Trigger Lambda function
  SetupFunctionResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupFunction.Arn
      AISTACK: !Ref AISTACK
      QNABOTSTACK: !Ref QNABOTSTACK
      MeetingAssistService: !Ref MeetingAssistService
      LexMeetingAssistBotId: !Ref LexMeetingAssistBotId
      LexMeetingAssistAliasId: !Ref LexMeetingAssistAliasId
      LexMeetingAssistLocaleId: !Ref LexMeetingAssistLocaleId
      LexMeetingAssistIdentityPoolId: !Ref LexMeetingAssistIdentityPoolId
      QnaMeetingAssistDemoJson: !Ref QnaMeetingAssistDemoJson
      QNASummarizeCallFunction: !Ref QNASummarizeCallFunction
#      QNAMeetingAssistLambdaHookFunction: !If
#        - ShouldConfigureBedrockKB
#        - ShouldConfigureQBusiness
#        - !Ref QNAQBusinessFunction
#        - !Ref QNABedrockKnowledgeBaseFunction
      QNAMeetingAssistLambdaHookFunction: !If
        - ShouldConfigureQBusiness
        - !Ref QNAQBusinessFunction
        - !If
          - ShouldConfigureBedrockKB
          - !Ref QNABedrockKnowledgeBaseFunction
          - 'NONE'
      QnaBotSettings: !Ref QnaBotSettings
      # Changes to Params below force MeetingAssist Setup to execute.
      TranscribeLanguageCode: !Ref TranscribeLanguageCode
      TranscriptLambdaHookFunctionArn: !Ref TranscriptLambdaHookFunctionArn
      TranscriptLambdaHookFunctionNonPartialOnly: !Ref TranscriptLambdaHookFunctionNonPartialOnly
      DynamoDbExpirationInDays: !Ref DynamoDbExpirationInDays
      EndOfCallTranscriptSummary: !Ref EndOfCallTranscriptSummary
      EndOfCallLambdaHookFunctionArn: !Ref EndOfCallLambdaHookFunctionArn
      CloudFrontDomainName: !Sub "https://${CloudFrontDomainName}/"
      Version: !Ref Version
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

